class Angle {
    static turn;
    value;
    constructor(value = 0){
        this.value = value;
    }
}
class Rad extends Angle {
    static turn = 2 * Math.PI;
    sin() {
        return Math.sin(this.value);
    }
    cos() {
        return Math.cos(this.value);
    }
    tan() {
        return Math.tan(this.value);
    }
    sincos() {
        return [
            Math.sin(this.value),
            Math.cos(this.value)
        ];
    }
    csc() {
        return 1 / this.sin();
    }
    cot() {
        return 1 / this.tan();
    }
    sec() {
        return 1 / this.cos();
    }
    asin() {
        return Math.asin(this.value);
    }
    acos() {
        return Math.acos(this.value);
    }
    atan() {
        return Math.atan(this.value);
    }
    add(other) {
        const value = other instanceof Angle ? other.toRad().value : other;
        return new Rad(this.value + value);
    }
    sub(other) {
        const value = other instanceof Angle ? other.toRad().value : other;
        return new Rad(this.value - value);
    }
    mul(other) {
        const value = other instanceof Angle ? other.toRad().value : other;
        return new Rad(this.value * value);
    }
    div(other) {
        const value = other instanceof Angle ? other.toRad().value : other;
        return new Rad(this.value / value);
    }
    neg() {
        return new Rad(-this.value);
    }
    eq(other) {
        const value = other instanceof Angle ? other.toRad().value : other;
        return this.value === value;
    }
    normal() {
        const rem = this.value % Rad.turn;
        return new Rad(rem < 0 ? rem + Rad.turn : rem);
    }
    normalize() {
        const rem = this.value % Rad.turn;
        this.value = rem < 0 ? rem + Rad.turn : rem;
        return this;
    }
    toRad() {
        return this;
    }
    toDeg() {
        return new Deg(this.value * (180 / Math.PI));
    }
    toString() {
        return `${this.value} rad`;
    }
}
class Deg extends Angle {
    static turn = 360;
    sin() {
        return this.toRad().sin();
    }
    cos() {
        return this.toRad().cos();
    }
    tan() {
        return this.toRad().tan();
    }
    sincos() {
        return this.toRad().sincos();
    }
    csc() {
        return this.toRad().csc();
    }
    cot() {
        return this.toRad().cot();
    }
    sec() {
        return this.toRad().sec();
    }
    asin() {
        return this.toRad().asin();
    }
    acos() {
        return this.toRad().acos();
    }
    atan() {
        return this.toRad().atan();
    }
    add(other) {
        const value = other instanceof Angle ? other.toDeg().value : other;
        return new Deg(this.value + value);
    }
    sub(other) {
        const value = other instanceof Angle ? other.toDeg().value : other;
        return new Deg(this.value - value);
    }
    mul(other) {
        const value = other instanceof Angle ? other.toDeg().value : other;
        return new Deg(this.value * value);
    }
    div(other) {
        const value = other instanceof Angle ? other.toDeg().value : other;
        return new Deg(this.value / value);
    }
    neg() {
        return new Deg(-this.value);
    }
    eq(other) {
        const value = other instanceof Angle ? other.toDeg().value : other;
        return this.value === value;
    }
    normal() {
        const rem = this.value % Deg.turn;
        return new Deg(rem < 0 ? rem + Deg.turn : rem);
    }
    normalize() {
        const rem = this.value % Deg.turn;
        this.value = rem < 0 ? rem + Deg.turn : rem;
        return this;
    }
    toRad() {
        return new Rad(this.value * (Math.PI / 180));
    }
    toDeg() {
        return this;
    }
    toString() {
        return `${this.value} deg`;
    }
}
export { Angle as Angle };
export { Rad as Rad };
export { Deg as Deg };
function decode(b64) {
    const binString = atob(b64);
    const size = binString.length;
    const bytes = new Uint8Array(size);
    for(let i = 0; i < size; i++){
        bytes[i] = binString.charCodeAt(i);
    }
    return bytes;
}
const importMeta = {
    url: "https://deno.land/x/lz4@v0.1.2/wasm.js",
    main: false
};
const source = Uint8Array.from(atob(""), (A1)=>A1.charCodeAt(0)
);
let A, I = null;
function g() {
    return null !== I && I.buffer === A.memory.buffer || (I = new Uint8Array(A.memory.buffer)), I;
}
let B = 0;
function Q(A2, I1) {
    const Q1 = I1(1 * A2.length);
    return g().set(A2, Q1 / 1), B = A2.length, Q1;
}
let C = null;
function E() {
    return null !== C && C.buffer === A.memory.buffer || (C = new Int32Array(A.memory.buffer)), C;
}
function D(A3, I2) {
    return g().subarray(A3 / 1, A3 / 1 + I2);
}
function lz4_decompress(I4) {
    var g2 = Q(I4, A.__wbindgen_malloc), C2 = B;
    A.lz4_decompress(8, g2, C2);
    var w2 = E()[2], o2 = E()[3], i = D(w2, o2).slice();
    return A.__wbindgen_free(w2, 1 * o2), i;
}
async function w(A4, I5) {
    if ("function" == typeof Response && A4 instanceof Response) {
        if ("function" == typeof WebAssembly.instantiateStreaming) try {
            return await WebAssembly.instantiateStreaming(A4, I5);
        } catch (I6) {
            if ("application/wasm" == A4.headers.get("Content-Type")) throw I6;
            console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", I6);
        }
        const g3 = await A4.arrayBuffer();
        return await WebAssembly.instantiate(g3, I5);
    }
    {
        const g4 = await WebAssembly.instantiate(A4, I5);
        return g4 instanceof WebAssembly.Instance ? {
            instance: g4,
            module: A4
        } : g4;
    }
}
async function o(I7) {
    void 0 === I7 && (I7 = importMeta.url.replace(/\.js$/, "_bg.wasm"));
    ("string" == typeof I7 || "function" == typeof Request && I7 instanceof Request || "function" == typeof URL && I7 instanceof URL) && (I7 = fetch(I7));
    const { instance: g5 , module: B1  } = await w(await I7, {
    });
    return A = g5.exports, o.__wbindgen_wasm_module = B1, A;
}
await o(source);
function decompress(input) {
    return lz4_decompress(input);
}
const source1 = decompress(decode("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JQgQDLECABAAEgjNBhAYLwEA+gAAWAAB0AAQCZoBEAC9ADIKlJJdBjAcIgslAAAkAgElADMIIgwlADQUIgMlABAgXQYA7AAiAiA2AgApAQE0AwASCiGSIDADIRQiNAYAlgQQB8cAEA0oBjEgDiBgAAC8BBAHuQERDUoGEA5KBgCLAQNRAAHoAQFRABEcWAcQBQsAECCBAAAtAQA7ABAJmAsAUQAArAYD7gUBUQARDFEAEgNRAGAYIAILngEbAwYwARAAsQIANQESkgwBAAoBABAAD2oDFAAQABAQEAAPlAY0D6AABw+7AyMAEAACoAAPIwYzIQtuog8AqxIAORKwA0EDdEGAgAFqIgMjAhNLZRIDxRXwBANBf0cNAEEBIQJBACEDDAELIANwEhIDBBIQA2gDCHcSQ0EAIQIhDyEEIBAS4AALBQBBgAQLBABBAQsCGg9wIAELC1EBAIwWgwALSAEAAAAEBAARArsYAgwAABgAAAEAAAgAkwUAAAAGAAAABxAAAAEAAAgACBgA8w4ADw4uZGVidWdfYXJhbmdlcwCoCQRuYW1lAYAJGdgYoQEyX1pOOXdlZV8PACExNQcA9RxfZmlyc3RfZml0MTdoNGY0OWRlMzkyMWQ2M2Q2YkUCiQFfWk44OF8kTFQkOwDwBi4uc2l6ZV9jbGFzc2VzLi5TaXplQw0AEEEeANFQb2xpY3kkdTIwJGFzBwAHOQAIIgDwC0dUJDIybmV3X2NlbGxfZm9yX2ZyZWVfbGlzjAD0A2RkYTk4MjhkNTNiMmY0MWRFA5cZLwSTlQBL8ggzMnNob3VsZF9tZXJnZV9hZGphY2VudJ4AAKwA8wdzMTdoZGI4ODdhZDQwZmEwMDc5MUUFlBk1NGRllBkjBg0UABFpkxkFHRpEbXVsCAwARGFkZAkMAENzdWIKRwAIJxoTC0cAAyYaBRgaNW11bBcaRGFkZA4MAENzdWIPRwAXM0cAExBHAAMhGgUTGkRtdWwSDABEYWRkEwwArHN1YhR3X1pONzBqAVhMYXJnZTYBAFEBD1gBDg/tAQj/BGM4OWMyZGQ0ZDc2NDVkZWRFFW55ADhSMTNtaW55AAAkAvAHMTdoZjVlOGU0MWE0ZWZiM2YwOUUWgVQCD3EANQ9CAhL/H2I2OTdhNGE3NDgxOGE4MzJFF1JfWk40Y29yZTNwdHI0OGRyb3BfaW5fcGxhY2WYAA0A5wDwBjdoMTkzNWJiNjI3MDA3ZGE0ZEUYgNgADywDRw5bAfB5MDJjM2U1ZGY0NTAxM2QwMkUHEgEAD19fc3RhY2tfcG9pbnRlcgkKAQAHLnJvZGF0YQBVCXByb2R1Y2VycwIIbGFuZ3VhZ2UBBFJ1c3QADHByb2Nlc3NlZC1ieQEFcnVzdGMlMS41NC4wLW5pZ2h0bHkgKDNlOTk0MzlmNCAyMDIxLTA1LTE3KQ=="));
const { instance  } = await WebAssembly.instantiate(source1, {
    env: {
        panic: (ptr, len)=>{
            const msg = new TextDecoder().decode(new Uint8Array(memory.buffer, ptr, len));
            throw new Error(msg);
        }
    }
});
const memory = instance.exports.memory;
const alloc = instance.exports.alloc;
instance.exports.dealloc;
const matrix2determinant = instance.exports.matrix2determinant;
const matrix2invert = instance.exports.matrix2invert;
const matrix2mul = instance.exports.matrix2mul;
const matrix2add = instance.exports.matrix2add;
const matrix2sub = instance.exports.matrix2sub;
const matrix3determinant = instance.exports.matrix3determinant;
const matrix3invert = instance.exports.matrix3invert;
const matrix3mul = instance.exports.matrix3mul;
const matrix3add = instance.exports.matrix3add;
const matrix3sub = instance.exports.matrix3sub;
const matrix4determinant = instance.exports.matrix4determinant;
const matrix4invert = instance.exports.matrix4invert;
const matrix4mul = instance.exports.matrix4mul;
const matrix4add = instance.exports.matrix4add;
const matrix4sub = instance.exports.matrix4sub;
class Vector3 {
    #internal = new Float32Array(3);
    get [0]() {
        return this.#internal[0];
    }
    set [0](val) {
        this.#internal[0] = val;
    }
    get [1]() {
        return this.#internal[1];
    }
    set [1](val) {
        this.#internal[1] = val;
    }
    get [2]() {
        return this.#internal[2];
    }
    set [2](val) {
        this.#internal[2] = val;
    }
    get x() {
        return this.#internal[0];
    }
    set x(val) {
        this.#internal[0] = val;
    }
    get y() {
        return this.#internal[1];
    }
    set y(val) {
        this.#internal[1] = val;
    }
    get z() {
        return this.#internal[2];
    }
    set z(val) {
        this.#internal[2] = val;
    }
    static negativeInfinity() {
        return new Vector3(Number.NEGATIVE_INFINITY);
    }
    static positiveInfinity() {
        return new Vector3(Number.POSITIVE_INFINITY);
    }
    static zero() {
        return new Vector3(0);
    }
    static one() {
        return new Vector3(1);
    }
    static up() {
        return new Vector3(0, 1, 0);
    }
    static down() {
        return new Vector3(0, -1, 0);
    }
    static left() {
        return new Vector3(-1, 0, 0);
    }
    static right() {
        return new Vector3(1, 0, 0);
    }
    static back() {
        return new Vector3(0, 0, -1);
    }
    static forward() {
        return new Vector3(0, 0, 1);
    }
    static fromHomogeneous(vector) {
        return vector.trunc().mul(1 / vector.w);
    }
    constructor(x, y, z){
        if (x !== undefined) {
            this.x = x;
            if (y !== undefined && z !== undefined) {
                this.y = y;
                this.z = z;
            } else {
                this.y = x;
                this.z = x;
            }
        }
    }
    clone() {
        return new Vector3(this.x, this.y, this.z);
    }
    mag() {
        return Math.hypot(this.x, this.y, this.z);
    }
    mag2() {
        return this.x ** 2 + this.y ** 2 + this.z ** 2;
    }
    normal() {
        return this.div(this.mag());
    }
    truncN(n) {
        switch(n){
            case 0:
                return new Vector2(this.y, this.z);
            case 1:
                return new Vector2(this.x, this.z);
            case 2:
                return new Vector2(this.x, this.y);
        }
    }
    trunc() {
        return new Vector2(this.x, this.y);
    }
    clamp(length) {
        return this.normal().mul(length);
    }
    dot(other) {
        const { x , y , z  } = this.mul(other);
        return x + y + z;
    }
    cross(other) {
        return new Vector3(this.y * other.z - this.z * other.y, this.z * other.x - this.x * other.z, this.x * other.y - this.y * other.x);
    }
    lerp(other, alpha) {
        return this.add(other.sub(this).mul(alpha));
    }
    set(other) {
        this.x = other.x;
        this.y = other.y;
        this.z = other.z;
        return this;
    }
    add(other) {
        const { x , y , z  } = typeof other === "number" ? {
            x: other,
            y: other,
            z: other
        } : other;
        return new Vector3(this.x + x, this.y + y, this.z + z);
    }
    sub(other) {
        const { x , y , z  } = typeof other === "number" ? {
            x: other,
            y: other,
            z: other
        } : other;
        return new Vector3(this.x - x, this.y - y, this.z - z);
    }
    mul(other) {
        const { x , y , z  } = typeof other === "number" ? {
            x: other,
            y: other,
            z: other
        } : other;
        return new Vector3(this.x * x, this.y * y, this.z * z);
    }
    div(other) {
        const { x , y , z  } = typeof other === "number" ? {
            x: other,
            y: other,
            z: other
        } : other;
        return new Vector3(this.x / x, this.y / y, this.z / z);
    }
    neg() {
        return new Vector3(-this.x, -this.y, -this.z);
    }
    midpoint(other) {
        return other.sub(this).div(2).add(this);
    }
    eq(other) {
        return this.x === other.x && this.y === other.y && this.z === other.z;
    }
    isFinite() {
        return isFinite(this.x) && isFinite(this.y) && isFinite(this.z);
    }
    extend(w1) {
        return new Vector4(this.x, this.y, this.z, w1);
    }
    toHomogeneous() {
        return this.extend(1);
    }
    toString() {
        return `Vector3 { x: ${this[0]}, y: ${this[1]}, z: ${this[2]} }`;
    }
    toArray() {
        return [
            this[0],
            this[1],
            this[2]
        ];
    }
    toFloat32Array() {
        return this.#internal;
    }
}
class Vector4 {
    #internal = new Float32Array(4);
    get [0]() {
        return this.#internal[0];
    }
    set [0](val) {
        this.#internal[0] = val;
    }
    get [1]() {
        return this.#internal[1];
    }
    set [1](val) {
        this.#internal[1] = val;
    }
    get [2]() {
        return this.#internal[2];
    }
    set [2](val) {
        this.#internal[2] = val;
    }
    get [3]() {
        return this.#internal[3];
    }
    set [3](val) {
        this.#internal[3] = val;
    }
    get x() {
        return this.#internal[0];
    }
    set x(val) {
        this.#internal[0] = val;
    }
    get y() {
        return this.#internal[1];
    }
    set y(val) {
        this.#internal[1] = val;
    }
    get z() {
        return this.#internal[2];
    }
    set z(val) {
        this.#internal[2] = val;
    }
    get w() {
        return this.#internal[3];
    }
    set w(val) {
        this.#internal[3] = val;
    }
    static negativeInfinity() {
        return new Vector4(Number.NEGATIVE_INFINITY);
    }
    static positiveInfinity() {
        return new Vector4(Number.POSITIVE_INFINITY);
    }
    static zero() {
        return new Vector4(0);
    }
    static one() {
        return new Vector4(1);
    }
    constructor(x, y, z, w2){
        if (x !== undefined) {
            this.x = x;
            this.y = y ?? x;
            this.z = z ?? x;
            this.w = w2 ?? x;
        }
    }
    clone() {
        return new Vector4(this.x, this.y, this.z, this.w);
    }
    mag() {
        return Math.hypot(this.x, this.y, this.z, this.w);
    }
    mag2() {
        return this.x ** 2 + this.y ** 2 + this.z ** 2 + this.w ** 2;
    }
    normal() {
        return this.div(this.mag());
    }
    truncN(n) {
        switch(n){
            case 0:
                return new Vector3(this.y, this.z, this.w);
            case 1:
                return new Vector3(this.x, this.z, this.w);
            case 2:
                return new Vector3(this.x, this.y, this.w);
            case 3:
                return new Vector3(this.x, this.y, this.z);
        }
    }
    trunc() {
        return new Vector3(this.x, this.y, this.z);
    }
    clamp(length) {
        return this.normal().mul(length);
    }
    dot(other) {
        const { x , y , z , w: w3  } = this.mul(other);
        return x + y + z + w3;
    }
    lerp(other, alpha) {
        return this.add(other.sub(this).mul(alpha));
    }
    set(other) {
        this.x = other.x;
        this.y = other.y;
        this.z = other.z;
        this.w = other.w;
        return this;
    }
    add(other) {
        const { x , y , z , w: w4  } = typeof other === "number" ? {
            x: other,
            y: other,
            z: other,
            w: other
        } : other;
        return new Vector4(this.x + x, this.y + y, this.z + z, this.w + w4);
    }
    sub(other) {
        const { x , y , z , w: w5  } = typeof other === "number" ? {
            x: other,
            y: other,
            z: other,
            w: other
        } : other;
        return new Vector4(this.x - x, this.y - y, this.z - z, this.w - w5);
    }
    mul(other) {
        const { x , y , z , w: w6  } = typeof other === "number" ? {
            x: other,
            y: other,
            z: other,
            w: other
        } : other;
        return new Vector4(this.x * x, this.y * y, this.z * z, this.w * w6);
    }
    div(other) {
        const { x , y , z , w: w7  } = typeof other === "number" ? {
            x: other,
            y: other,
            z: other,
            w: other
        } : other;
        return new Vector4(this.x / x, this.y / y, this.z / z, this.w / w7);
    }
    neg() {
        return new Vector4(-this.x, -this.y, -this.z, -this.w);
    }
    midpoint(other) {
        return other.sub(this).div(2).add(this);
    }
    eq(other) {
        return this.x === other.x && this.y === other.y && this.z === other.z && this.w === other.w;
    }
    isFinite() {
        return isFinite(this.x) && isFinite(this.y) && isFinite(this.z) && isFinite(this.w);
    }
    toString() {
        return `Vector4 { x: ${this[0]}, y: ${this[1]}, z: ${this[2]}, w: ${this[3]} }`;
    }
    toArray() {
        return [
            this[0],
            this[1],
            this[2],
            this[3]
        ];
    }
    toFloat32Array() {
        return this.#internal;
    }
}
class Vector2 {
    #internal = new Float32Array(2);
    get [0]() {
        return this.#internal[0];
    }
    set [0](val) {
        this.#internal[0] = val;
    }
    get [1]() {
        return this.#internal[1];
    }
    set [1](val) {
        this.#internal[1] = val;
    }
    get x() {
        return this.#internal[0];
    }
    set x(val) {
        this.#internal[0] = val;
    }
    get y() {
        return this.#internal[1];
    }
    set y(val) {
        this.#internal[1] = val;
    }
    static negativeInfinity() {
        return new Vector2(Number.NEGATIVE_INFINITY);
    }
    static positiveInfinity() {
        return new Vector2(Number.POSITIVE_INFINITY);
    }
    static zero() {
        return new Vector2(0);
    }
    static one() {
        return new Vector2(1);
    }
    static up() {
        return new Vector2(0, 1);
    }
    static down() {
        return new Vector2(0, -1);
    }
    static left() {
        return new Vector2(-1, 0);
    }
    static right() {
        return new Vector2(1, 0);
    }
    constructor(x, y){
        if (x !== undefined) {
            this.x = x;
            if (y !== undefined) {
                this.y = y;
            } else {
                this.y = x;
            }
        }
    }
    clone() {
        return new Vector2(this.x, this.y);
    }
    mag() {
        return Math.hypot(this.x, this.y);
    }
    mag2() {
        return this.x ** 2 + this.y ** 2;
    }
    normal() {
        return this.div(this.mag());
    }
    angle() {
        return new Rad(Math.atan2(this.y, this.x));
    }
    clamp(length) {
        return this.normal().mul(length);
    }
    dot(other) {
        const { x , y  } = this.mul(other);
        return x + y;
    }
    lerp(other, alpha) {
        return this.add(other.sub(this).mul(alpha));
    }
    set(other) {
        this.x = other.x;
        this.y = other.y;
        return this;
    }
    add(other) {
        const { x , y  } = typeof other === "number" ? {
            x: other,
            y: other
        } : other;
        return new Vector2(this.x + x, this.y + y);
    }
    sub(other) {
        const { x , y  } = typeof other === "number" ? {
            x: other,
            y: other
        } : other;
        return new Vector2(this.x - x, this.y - y);
    }
    mul(other) {
        const { x , y  } = typeof other === "number" ? {
            x: other,
            y: other
        } : other;
        return new Vector2(this.x * x, this.y * y);
    }
    div(other) {
        const { x , y  } = typeof other === "number" ? {
            x: other,
            y: other
        } : other;
        return new Vector2(this.x / x, this.y / y);
    }
    neg() {
        return new Vector2(-this.x, -this.y);
    }
    midpoint(other) {
        return other.sub(this).div(2).add(this);
    }
    eq(other) {
        return this.x === other.x && this.y === other.y;
    }
    isFinite() {
        return isFinite(this.x) && isFinite(this.y);
    }
    extend3(z) {
        return new Vector3(this.x, this.y, z);
    }
    extend4(z, w8) {
        return new Vector4(this.x, this.y, z, w8);
    }
    toString() {
        return `Vector2 { x: ${this[0]}, y: ${this[1]} }`;
    }
    toArray() {
        return [
            this[0],
            this[1]
        ];
    }
    toFloat32Array() {
        return this.#internal;
    }
}
export { Vector3 as Vector3 };
export { Vector4 as Vector4 };
export { Vector2 as Vector2 };
class Matrix2 {
    ptr;
    #internal;
    get [0]() {
        return new Proxy([
            this.#internal[0],
            this.#internal[1]
        ], {
            set: (_target, prop, value)=>{
                if (prop === "0" || prop === "1") {
                    this.#internal[prop] = value;
                    return true;
                }
                return false;
            }
        });
    }
    set [0](val) {
        this.#internal[0] = val[0];
        this.#internal[1] = val[1];
    }
    get [1]() {
        return new Proxy([
            this.#internal[2],
            this.#internal[3]
        ], {
            set: (_target, prop, value)=>{
                if (prop === "2" || prop === "3") {
                    this.#internal[2 + prop] = value;
                    return true;
                }
                return false;
            }
        });
    }
    set [1](val) {
        this.#internal[3] = val[0];
        this.#internal[4] = val[1];
    }
    get x() {
        return new Vector2(...this[0]);
    }
    set x(val) {
        this.#internal[0] = val.x;
        this.#internal[1] = val.y;
    }
    get y() {
        return new Vector2(...this[1]);
    }
    set y(val) {
        this.#internal[2] = val.x;
        this.#internal[3] = val.y;
    }
    static from(c0r0, c0r1, c1r0, c1r1) {
        return new Matrix2(new Vector2(c0r0, c0r1), new Vector2(c1r0, c1r1));
    }
    static fromAngle(theta) {
        const [s, c] = theta.sincos();
        return Matrix2.from(c, s, -s, c);
    }
    static identity() {
        return Matrix2.from(1, 0, 0, 1);
    }
    static lookAt(dir, up) {
        const basis1 = dir.normal();
        const basis2 = up.x * dir.y >= up.y * dir.x ? new Vector2(basis1.y, -basis1.x) : new Vector2(-basis1.y, basis1.x);
        return new Matrix2(basis1, basis2);
    }
    constructor(x, y){
        this.ptr = typeof x === "number" ? x : alloc(16);
        this.#internal = new Float32Array(memory.buffer, this.ptr, 4);
        if (typeof x !== "number" && x !== undefined) {
            this.x = x ?? Vector2.zero();
            this.y = y ?? Vector2.zero();
        }
    }
    clone() {
        return new Matrix2(this.x, this.y);
    }
    transpose() {
        return Matrix2.from(this[0][0], this[1][0], this[0][1], this[1][1]);
    }
    eq(other) {
        return this[0][0] === other[0][0] && this[0][1] === other[0][1] && this[1][0] === other[1][0] && this[1][1] === other[1][1];
    }
    isFinite() {
        return this.x.isFinite() && this.y.isFinite();
    }
    row(n) {
        return [
            this[0][n],
            this[1][n]
        ];
    }
    col(n) {
        return this[n];
    }
    diag() {
        return [
            this[0][0],
            this[1][1]
        ];
    }
    trace() {
        return this[0][0] + this[1][1];
    }
    determinant() {
        return matrix2determinant(this.ptr);
    }
    invert() {
        const ptr = matrix2invert(this.ptr);
        if (ptr !== 0) {
            return new Matrix2(ptr);
        }
    }
    add(other) {
        if (typeof other === "number") {
            return new Matrix2(this.x.add(other), this.y.add(other));
        }
        return new Matrix2(matrix2add(this.ptr, other.ptr));
    }
    sub(other) {
        if (typeof other === "number") {
            return new Matrix2(this.x.sub(other), this.y.sub(other));
        }
        return new Matrix2(matrix2sub(this.ptr, other.ptr));
    }
    mul(other) {
        if (typeof other === "number") {
            return new Matrix2(this.x.mul(other), this.y.mul(other));
        }
        return new Matrix2(matrix2mul(this.ptr, other.ptr));
    }
    toMatrix3() {
        return Matrix3.from(this[0][0], this[0][1], 0, this[1][0], this[1][1], 0, 0, 0, 1);
    }
    toMatrix4() {
        return Matrix4.from(this[0][0], this[0][1], 0, 0, this[1][0], this[1][1], 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    }
    toArray() {
        return [
            this[0],
            this[1]
        ];
    }
    toFloat32Array() {
        return new Float32Array(this.#internal);
    }
}
class Matrix3 {
    ptr;
    #internal;
    get [0]() {
        return new Proxy([
            this.#internal[0],
            this.#internal[1],
            this.#internal[2]
        ], {
            set: (_target, prop, value)=>{
                if (prop === "0" || prop === "1" || prop === "2") {
                    this.#internal[prop] = value;
                    return true;
                }
                return false;
            }
        });
    }
    set [0](val) {
        this.#internal[0] = val[0];
        this.#internal[1] = val[1];
        this.#internal[2] = val[2];
    }
    get [1]() {
        return new Proxy([
            this.#internal[3],
            this.#internal[4],
            this.#internal[5]
        ], {
            set: (_target, prop, value)=>{
                if (prop === "0" || prop === "1" || prop === "2") {
                    this.#internal[3 + prop] = value;
                    return true;
                }
                return false;
            }
        });
    }
    set [1](val) {
        this.#internal[3] = val[0];
        this.#internal[4] = val[1];
        this.#internal[5] = val[2];
    }
    get [2]() {
        return new Proxy([
            this.#internal[6],
            this.#internal[7],
            this.#internal[8]
        ], {
            set: (_target, prop, value)=>{
                if (prop === "0" || prop === "1" || prop === "2") {
                    this.#internal[6 + prop] = value;
                    return true;
                }
                return false;
            }
        });
    }
    set [2](val) {
        this.#internal[6] = val[0];
        this.#internal[7] = val[1];
        this.#internal[8] = val[2];
    }
    get x() {
        return new Vector3(...this[0]);
    }
    set x(val) {
        this.#internal[0] = val.x;
        this.#internal[1] = val.y;
        this.#internal[2] = val.z;
    }
    get y() {
        return new Vector3(...this[1]);
    }
    set y(val) {
        this.#internal[3] = val.x;
        this.#internal[4] = val.y;
        this.#internal[5] = val.z;
    }
    get z() {
        return new Vector3(...this[2]);
    }
    set z(val) {
        this.#internal[6] = val.x;
        this.#internal[7] = val.y;
        this.#internal[8] = val.z;
    }
    static from(c0r0, c0r1, c0r2, c1r0, c1r1, c1r2, c2r0, c2r1, c2r2) {
        return new Matrix3(new Vector3(c0r0, c0r1, c0r2), new Vector3(c1r0, c1r1, c1r2), new Vector3(c2r0, c2r1, c2r2));
    }
    static identity() {
        return Matrix3.from(1, 0, 0, 0, 1, 0, 0, 0, 1);
    }
    static lookToLh(dir, up) {
        dir = dir.normal();
        const side = up.cross(dir).normal();
        up = dir.cross(side).normal();
        return new Matrix3(side, up, dir).transpose();
    }
    static lookToRh(dir, up) {
        return Matrix3.lookToLh(dir.neg(), up);
    }
    static lookAtLh(eye, center, up) {
        const dir = center.sub(eye);
        return Matrix2.lookAt(dir, up).toMatrix3();
    }
    static lookAtRh(eye, center, up) {
        const dir = eye.sub(center);
        return Matrix2.lookAt(dir, up).toMatrix3();
    }
    static fromAngleX(theta) {
        const [s, c] = theta.sincos();
        return Matrix3.from(1, 0, 0, 0, c, s, 0, -s, c);
    }
    static fromAngleY(theta) {
        const [s, c] = theta.sincos();
        return Matrix3.from(c, 0, -s, 0, 1, 0, s, 0, c);
    }
    static fromAngleZ(theta) {
        const [s, c] = theta.sincos();
        return Matrix3.from(c, s, 0, -s, c, 0, 0, 0, 1);
    }
    static fromAxisAngle(axis, angle) {
        const [s, c] = angle.sincos();
        const c1 = 1 - c;
        return Matrix3.from(c1 * axis.x * axis.x + c, c1 * axis.x * axis.y + s * axis.z, c1 * axis.x * axis.z - s * axis.y, c1 * axis.x * axis.y - s * axis.z, c1 * axis.y * axis.y + c, c1 * axis.y * axis.z + s * axis.x, c1 * axis.x * axis.z + s * axis.y, c1 * axis.y * axis.z - s * axis.x, c1 * axis.z * axis.z + c);
    }
    static fromTranslation(translation) {
        return Matrix3.from(1, 0, 0, 0, 1, 0, translation.x, translation.y, 1);
    }
    static fromScale(scale) {
        return this.fromNonuniformScale(scale, scale);
    }
    static fromNonuniformScale(x, y) {
        return Matrix3.from(x, 0, 0, 0, y, 0, 0, 0, 1);
    }
    static fromQuaternion(quaternion) {
        const x2 = quaternion.vector.x * 2;
        const y2 = quaternion.vector.y * 2;
        const z2 = quaternion.vector.z * 2;
        const xx2 = x2 * quaternion.vector.x;
        const xy2 = x2 * quaternion.vector.y;
        const xz2 = x2 * quaternion.vector.z;
        const yy2 = y2 * quaternion.vector.y;
        const yz2 = y2 * quaternion.vector.z;
        const zz2 = z2 * quaternion.vector.z;
        const sy2 = y2 * quaternion.scalar;
        const sz2 = z2 * quaternion.scalar;
        const sx2 = x2 * quaternion.scalar;
        return Matrix3.from(1 - yy2 - zz2, xy2 + sz2, xz2 - sy2, xy2 - sz2, 1 - xx2 - zz2, yz2 + sx2, xz2 + sy2, yz2 - sx2, 1 - xx2 - yy2);
    }
    static fromDecomposed(decomposed) {
        const m = Matrix2.fromAngle(decomposed.rot).mul(decomposed.scale).toMatrix3();
        m.z = decomposed.disp.extend3(1);
        return m;
    }
    constructor(x, y, z){
        this.ptr = typeof x === "number" ? x : alloc(36);
        this.#internal = new Float32Array(memory.buffer, this.ptr, 9);
        if (typeof x !== "number" && x !== undefined) {
            this.x = x ?? Vector3.zero();
            this.y = y ?? Vector3.zero();
            this.z = z ?? Vector3.zero();
        }
    }
    clone() {
        return new Matrix3(this.x, this.y, this.z);
    }
    transpose() {
        return Matrix3.from(this[0][0], this[1][0], this[2][0], this[0][1], this[1][1], this[2][1], this[0][2], this[1][2], this[2][2]);
    }
    eq(other) {
        return this[0][0] === other[0][0] && this[0][1] === other[0][1] && this[0][2] === other[0][2] && this[1][0] === other[1][0] && this[1][1] === other[1][1] && this[1][2] === other[1][2] && this[2][0] === other[2][0] && this[2][1] === other[2][1] && this[2][2] === other[2][2];
    }
    isFinite() {
        return this.x.isFinite() && this.y.isFinite() && this.z.isFinite();
    }
    row(n) {
        return [
            this[0][n],
            this[1][n],
            this[2][n]
        ];
    }
    col(n) {
        return this[n];
    }
    diag() {
        return [
            this[0][0],
            this[1][1],
            this[2][2]
        ];
    }
    trace() {
        return this[0][0] + this[1][1] + this[2][2];
    }
    determinant() {
        return matrix3determinant(this.ptr);
    }
    invert() {
        const ptr = matrix3invert(this.ptr);
        if (ptr !== 0) {
            return new Matrix3(ptr);
        }
    }
    add(other) {
        if (typeof other === "number") {
            return new Matrix3(this.x.add(other), this.y.add(other), this.z.add(other));
        }
        return new Matrix3(matrix3add(this.ptr, other.ptr));
    }
    sub(other) {
        if (typeof other === "number") {
            return new Matrix3(this.x.sub(other), this.y.sub(other), this.z.sub(other));
        }
        return new Matrix3(matrix3sub(this.ptr, other.ptr));
    }
    mul(other) {
        if (typeof other === "number") {
            return new Matrix3(this.x.mul(other), this.y.mul(other), this.z.mul(other));
        }
        return new Matrix3(matrix3mul(this.ptr, other.ptr));
    }
    toMatrix4() {
        return Matrix4.from(this[0][0], this[0][1], this[0][2], 0, this[1][0], this[1][1], this[1][2], 0, this[2][0], this[2][1], this[2][2], 0, 0, 0, 0, 1);
    }
    toArray() {
        return [
            this[0],
            this[1],
            this[2]
        ];
    }
    toFloat32Array() {
        return new Float32Array(this.#internal);
    }
}
class Matrix4 {
    ptr;
    #internal;
    get [0]() {
        return new Proxy([
            this.#internal[0],
            this.#internal[1],
            this.#internal[2],
            this.#internal[3], 
        ], {
            set: (_target, prop, value)=>{
                if (prop === "0" || prop === "1" || prop === "2" || prop === "3") {
                    this.#internal[prop] = value;
                    return true;
                }
                return false;
            }
        });
    }
    set [0](val) {
        this.#internal[0] = val[0];
        this.#internal[1] = val[1];
        this.#internal[2] = val[2];
        this.#internal[3] = val[3];
    }
    get [1]() {
        return new Proxy([
            this.#internal[4],
            this.#internal[5],
            this.#internal[6],
            this.#internal[7], 
        ], {
            set: (_target, prop, value)=>{
                if (prop === "0" || prop === "1" || prop === "2" || prop === "3") {
                    this.#internal[4 + prop] = value;
                    return true;
                }
                return false;
            }
        });
    }
    set [1](val) {
        this.#internal[4] = val[0];
        this.#internal[5] = val[1];
        this.#internal[6] = val[2];
        this.#internal[7] = val[3];
    }
    get [2]() {
        return new Proxy([
            this.#internal[8],
            this.#internal[9],
            this.#internal[10],
            this.#internal[11], 
        ], {
            set: (_target, prop, value)=>{
                if (prop === "0" || prop === "1" || prop === "2" || prop === "3") {
                    this.#internal[8 + prop] = value;
                    return true;
                }
                return false;
            }
        });
    }
    set [2](val) {
        this.#internal[8] = val[0];
        this.#internal[9] = val[1];
        this.#internal[10] = val[2];
        this.#internal[11] = val[3];
    }
    get [3]() {
        return new Proxy([
            this.#internal[12],
            this.#internal[13],
            this.#internal[14],
            this.#internal[15], 
        ], {
            set: (_target, prop, value)=>{
                if (prop === "0" || prop === "1" || prop === "2" || prop === "3") {
                    this.#internal[12 + prop] = value;
                    return true;
                }
                return false;
            }
        });
    }
    set [3](val) {
        this.#internal[12] = val[0];
        this.#internal[13] = val[1];
        this.#internal[14] = val[2];
        this.#internal[15] = val[3];
    }
    get x() {
        return new Vector4(...this[0]);
    }
    set x(val) {
        this.#internal[0] = val.x;
        this.#internal[1] = val.y;
        this.#internal[2] = val.z;
        this.#internal[3] = val.w;
    }
    get y() {
        return new Vector4(...this[1]);
    }
    set y(val) {
        this.#internal[4] = val.x;
        this.#internal[5] = val.y;
        this.#internal[6] = val.z;
        this.#internal[7] = val.w;
    }
    get z() {
        return new Vector4(...this[2]);
    }
    set z(val) {
        this.#internal[8] = val.x;
        this.#internal[9] = val.y;
        this.#internal[10] = val.z;
        this.#internal[11] = val.w;
    }
    get w() {
        return new Vector4(...this[3]);
    }
    set w(val) {
        this.#internal[12] = val.x;
        this.#internal[13] = val.y;
        this.#internal[14] = val.z;
        this.#internal[15] = val.w;
    }
    static from(c0r0, c0r1, c0r2, c0r3, c1r0, c1r1, c1r2, c1r3, c2r0, c2r1, c2r2, c2r3, c3r0, c3r1, c3r2, c3r3) {
        return new Matrix4(new Vector4(c0r0, c0r1, c0r2, c0r3), new Vector4(c1r0, c1r1, c1r2, c1r3), new Vector4(c2r0, c2r1, c2r2, c2r3), new Vector4(c3r0, c3r1, c3r2, c3r3));
    }
    static fromPerspective(perspective) {
        if (perspective.left <= perspective.right) {
            throw new RangeError(`perspective.left (${perspective.right}) cannot be greater than perspective.right (${perspective.right})`);
        }
        if (perspective.bottom <= perspective.top) {
            throw new RangeError(`perspective.bottom (${perspective.bottom}) cannot be greater than perspective.top (${perspective.top})`);
        }
        if (perspective.near <= perspective.far) {
            throw new RangeError(`perspective.near (${perspective.near}) cannot be greater than perspective.far (${perspective.far})`);
        }
        const c0r0 = 2 * perspective.near / (perspective.right - perspective.left);
        const c1r1 = 2 * perspective.near / (perspective.top - perspective.bottom);
        const c2r0 = (perspective.right + perspective.left) / (perspective.right - perspective.left);
        const c2r1 = (perspective.top + perspective.bottom) / (perspective.top - perspective.bottom);
        const c2r2 = -(perspective.far + perspective.near) / (perspective.far - perspective.near);
        const c2r3 = -1;
        const c3r2 = -(2 * perspective.far * perspective.near) / (perspective.far - perspective.near);
        return Matrix4.from(c0r0, 0, 0, 0, 0, c1r1, 0, 0, c2r0, c2r1, c2r2, c2r3, 0, 0, c3r2, 0);
    }
    static identity() {
        return Matrix4.from(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    }
    static fromTranslation(translation) {
        return Matrix4.from(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, translation.x, translation.y, translation.z, 1);
    }
    static fromScale(scale) {
        return this.fromNonuniformScale(scale, scale);
    }
    static fromNonuniformScale(x, y) {
        return Matrix4.from(x, 0, 0, 0, 0, y, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    }
    static lookToRh(eye, dir, up) {
        const f = dir.normal();
        const s = f.cross(up).normal();
        const u = s.cross(f);
        return Matrix4.from(s.x, u.x, -f.x, 0, s.y, u.y, -f.y, 0, s.z, u.z, -f.z, 0, -eye.dot(s), -eye.dot(u), eye.dot(f), 1);
    }
    static lookToLh(eye, dir, up) {
        return Matrix4.lookToRh(eye, dir.neg(), up);
    }
    static lookAtRh(eye, center, up) {
        return Matrix4.lookToRh(eye, center.sub(eye), up);
    }
    static lookAtLh(eye, center, up) {
        return Matrix4.lookToLh(eye, center.sub(eye), up);
    }
    static fromAngleX(theta) {
        const [s, c] = theta.sincos();
        return Matrix4.from(1, 0, 0, 0, 0, c, s, 0, 0, -s, c, 0, 0, 0, 0, 1);
    }
    static fromAngleY(theta) {
        const [s, c] = theta.sincos();
        return Matrix4.from(c, 0, -s, 0, 0, 1, 0, 0, s, 0, c, 0, 0, 0, 0, 1);
    }
    static fromAngleZ(theta) {
        const [s, c] = theta.sincos();
        return Matrix4.from(c, s, 0, 0, -s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    }
    static fromAxisAngle(axis, angle) {
        const [s, c] = angle.sincos();
        const c1 = 1 - c;
        return Matrix4.from(c1 * axis.x * axis.x + c, c1 * axis.x * axis.y + s * axis.z, c1 * axis.x * axis.z - s * axis.y, 0, c1 * axis.x * axis.y - s * axis.z, c1 * axis.y * axis.y + c, c1 * axis.y * axis.z + s * axis.x, 0, c1 * axis.x * axis.z + s * axis.y, c1 * axis.y * axis.z - s * axis.x, c1 * axis.z * axis.z + c, 0, 0, 0, 0, 1);
    }
    static fromQuaternion(quaternion) {
        const x2 = quaternion.vector.x + quaternion.vector.x;
        const y2 = quaternion.vector.y + quaternion.vector.y;
        const z2 = quaternion.vector.z + quaternion.vector.z;
        const xx2 = x2 * quaternion.vector.x;
        const xy2 = x2 * quaternion.vector.y;
        const xz2 = x2 * quaternion.vector.z;
        const yy2 = y2 * quaternion.vector.y;
        const yz2 = y2 * quaternion.vector.z;
        const zz2 = z2 * quaternion.vector.z;
        const sy2 = y2 * quaternion.scalar;
        const sz2 = z2 * quaternion.scalar;
        const sx2 = x2 * quaternion.scalar;
        return Matrix4.from(1 - yy2 - zz2, xy2 + sz2, xz2 - sy2, 0, xy2 - sz2, 1 - xx2 - zz2, yz2 + sx2, 0, xz2 + sy2, yz2 - sx2, 1 - xx2 - yy2, 0, 0, 0, 0, 1);
    }
    static fromDecomposed(decomposed) {
        const m = Matrix3.fromQuaternion(decomposed.rot).mul(decomposed.scale).toMatrix4();
        m.w = decomposed.disp.extend(1);
        return m;
    }
    constructor(x, y, z, w9){
        this.ptr = typeof x === "number" ? x : alloc(64);
        this.#internal = new Float32Array(memory.buffer, this.ptr, 16);
        if (typeof x !== "number" && x !== undefined) {
            this.x = x ?? Vector4.zero();
            this.y = y ?? Vector4.zero();
            this.z = z ?? Vector4.zero();
            this.w = w9 ?? Vector4.zero();
        }
    }
    clone() {
        return new Matrix4(this.x, this.y, this.z, this.w);
    }
    transpose() {
        return Matrix4.from(this[0][0], this[1][0], this[2][0], this[3][0], this[0][1], this[1][1], this[2][1], this[3][1], this[0][2], this[1][2], this[2][2], this[3][2], this[0][3], this[1][3], this[2][3], this[3][3]);
    }
    eq(other) {
        return this[0][0] === other[0][0] && this[0][1] === other[0][1] && this[0][2] === other[0][2] && this[0][3] === other[0][3] && this[1][0] === other[1][0] && this[1][1] === other[1][1] && this[1][2] === other[1][2] && this[1][3] === other[1][3] && this[2][0] === other[2][0] && this[2][1] === other[2][1] && this[2][2] === other[2][2] && this[2][3] === other[2][3] && this[3][0] === other[3][0] && this[3][1] === other[3][1] && this[3][2] === other[3][2] && this[3][3] === other[3][3];
    }
    isFinite() {
        return this.x.isFinite() && this.y.isFinite() && this.z.isFinite() && this.w.isFinite();
    }
    row(n) {
        return [
            this[0][n],
            this[1][n],
            this[2][n],
            this[3][n]
        ];
    }
    col(n) {
        return this[n];
    }
    diag() {
        return [
            this[0][0],
            this[1][1],
            this[2][2],
            this[3][3]
        ];
    }
    trace() {
        return this[0][0] + this[1][1] + this[2][2] + this[3][3];
    }
    determinant() {
        return matrix4determinant(this.ptr);
    }
    invert() {
        const ptr = matrix4invert(this.ptr);
        if (ptr !== 0) {
            return new Matrix4(ptr);
        }
    }
    add(other) {
        if (typeof other === "number") {
            return new Matrix4(this.x.add(other), this.y.add(other), this.z.add(other), this.w.add(other));
        }
        return new Matrix4(matrix4add(this.ptr, other.ptr));
    }
    sub(other) {
        if (typeof other === "number") {
            return new Matrix4(this.x.sub(other), this.y.sub(other), this.z.sub(other), this.w.sub(other));
        }
        return new Matrix4(matrix4sub(this.ptr, other.ptr));
    }
    mul(other) {
        if (typeof other === "number") {
            return new Matrix4(this.x.mul(other), this.y.mul(other), this.z.mul(other), this.w.mul(other));
        }
        return new Matrix4(matrix4mul(this.ptr, other.ptr));
    }
    toArray() {
        return [
            this[0],
            this[1],
            this[2],
            this[3], 
        ];
    }
    toFloat32Array() {
        return new Float32Array(this.#internal);
    }
}
export { Matrix2 as Matrix2 };
export { Matrix3 as Matrix3 };
export { Matrix4 as Matrix4 };
const epsilon = 3.4028235 * 10 ** 38;
function absDiffEq(x, y) {
    return (x > y ? x - y : x - y) <= epsilon;
}
class Perspective {
    left;
    right;
    bottom;
    top;
    near;
    far;
    constructor(left, right, bottom, top, near, far){
        this.left = left;
        this.right = right;
        this.bottom = bottom;
        this.top = top;
        this.near = near;
        this.far = far;
    }
    toMatrix4() {
        if (this.left > this.right) {
            throw new RangeError(`perspective.left (${this.right}) cannot be greater than perspective.right (${this.right})`);
        }
        if (this.bottom > this.top) {
            throw new RangeError(`perspective.bottom (${this.bottom}) cannot be greater than perspective.top (${this.top})`);
        }
        if (this.near > this.far) {
            throw new RangeError(`perspective.near (${this.near}) cannot be greater than perspective.far (${this.far})`);
        }
        const c0r0 = 2 * this.near / (this.right - this.left);
        const c1r1 = 2 * this.near / (this.top - this.bottom);
        const c2r0 = (this.right + this.left) / (this.right - this.left);
        const c2r1 = (this.top + this.bottom) / (this.top - this.bottom);
        const c2r2 = -(this.far + this.near) / (this.far - this.near);
        const c2r3 = -1;
        const c3r2 = -(2 * this.far * this.near) / (this.far - this.near);
        return Matrix4.from(c0r0, 0, 0, 0, 0, c1r1, 0, 0, c2r0, c2r1, c2r2, c2r3, 0, 0, c3r2, 0);
    }
}
class PerspectiveFov {
    fovy;
    aspect;
    near;
    far;
    constructor(fovy, aspect, near, far){
        fovy = fovy.toRad();
        this.fovy = fovy;
        this.aspect = aspect;
        this.near = near;
        this.far = far;
    }
    toPerspective() {
        const angle = this.fovy.div(2);
        const ymax = this.near * angle.tan();
        const xmax = ymax * this.aspect;
        return new Perspective(-xmax, xmax, -ymax, ymax, this.near, this.far);
    }
    toMatrix4() {
        if (this.fovy.value < 0) {
            throw new RangeError(`The vertical field of view cannot be below zero, found ${this.fovy.toString()}`);
        }
        if (this.fovy.value > Rad.turn / 2) {
            throw new RangeError(`The vertical field of view cannot be greater than a half turn, found ${this.fovy.toString()}`);
        }
        if (absDiffEq(Math.abs(this.aspect), 0)) {
            throw new RangeError(`The absolute aspect ratio cannot be zero, found ${Math.abs(this.aspect)}`);
        }
        if (this.near < 0) {
            throw new RangeError(`The near plane distance cannot be below zero, found ${this.near}`);
        }
        if (this.far < 0) {
            throw new RangeError(`The far plane distance cannot be below zero, found ${this.far}`);
        }
        if (absDiffEq(this.far, this.near)) {
            throw new RangeError(`The far plane (${this.far}) and near plane (${this.near}) are too close`);
        }
        const f = this.fovy.div(2).cot();
        const c0r0 = f / this.aspect;
        const c1r1 = f;
        const c2r2 = (this.far + this.near) / (this.far - this.near);
        const c2r3 = -1;
        const c3r2 = 2 * this.far * this.near / (this.near - this.far);
        return Matrix4.from(c0r0, 0, 0, 0, 0, c1r1, 0, 0, 0, 0, c2r2, c2r3, 0, 0, c3r2, 0);
    }
}
class Orthographic {
    left;
    right;
    bottom;
    top;
    near;
    far;
    constructor(left, right, bottom, top, near, far){
        this.left = left;
        this.right = right;
        this.bottom = bottom;
        this.top = top;
        this.near = near;
        this.far = far;
    }
    toMatrix4() {
        const c0r0 = 2 / (this.right - this.left);
        const c1r1 = 2 / (this.top - this.bottom);
        const c2r2 = -2 / (this.far - this.near);
        const c3r0 = -(this.right + this.left) / (this.right - this.left);
        const c3r1 = -(this.top + this.bottom) / (this.top - this.bottom);
        const c3r2 = -(this.far + this.near) / (this.far - this.near);
        return Matrix4.from(c0r0, 0, 0, 0, 0, c1r1, 0, 0, 0, 0, c2r2, 0, c3r0, c3r1, c3r2, 1);
    }
}
export { Perspective as Perspective };
export { PerspectiveFov as PerspectiveFov };
export { Orthographic as Orthographic };
class Quaternion {
    scalar;
    vector;
    static zero() {
        return new Quaternion(0, Vector3.zero());
    }
    static one() {
        return new Quaternion(1, Vector3.one());
    }
    static fromArc(src, dst, fallback) {
        const avgMag = Math.sqrt(src.mag2() * dst.mag2());
        const dot = src.dot(dst);
        if (dot === avgMag) {
            return Quaternion.one();
        }
        if (dot === -avgMag) {
            let axis = fallback;
            if (axis === undefined) {
                let vector = Vector3.up().cross(src);
                if (vector.eq(Vector3.zero())) {
                    vector = Vector3.right().cross(src);
                }
                axis = vector.normal();
            }
            return Quaternion.fromAxisAngle(axis, new Rad(Rad.turn / 2));
        }
        return new Quaternion(avgMag + dot, src.cross(dst).normal());
    }
    static fromAxisAngle(axis, angle) {
        const [s, c] = angle.div(2).sincos();
        return new Quaternion(c, axis.mul(s));
    }
    static fromMatrix3(matrix) {
        const trace = matrix.trace();
        if (trace >= 0) {
            let s = Math.sqrt(1 + trace);
            const w10 = 0.5 * s;
            s = 0.5 / s;
            const x = (matrix[1][2] - matrix[2][1]) * s;
            const y = (matrix[2][0] - matrix[0][2]) * s;
            const z = (matrix[0][1] - matrix[1][0]) * s;
            return new Quaternion(w10, new Vector3(x, y, z));
        }
        if (matrix[0][0] > matrix[1][1] && matrix[0][0] > matrix[2][2]) {
            let s = Math.sqrt(matrix[0][0] - matrix[1][1] - matrix[2][2] + 1);
            const x = 0.5 * s;
            s = 0.5 / s;
            const y = (matrix[1][0] + matrix[0][1]) * s;
            const z = (matrix[0][2] + matrix[2][0]) * s;
            const w11 = (matrix[1][2] - matrix[2][1]) * s;
            return new Quaternion(w11, new Vector3(x, y, z));
        }
        if (matrix[1][1] > matrix[2][2]) {
            let s = Math.sqrt(matrix[1][1] - matrix[0][0] - matrix[2][2] + 1);
            const y = 0.5 * s;
            s = 0.5 / s;
            const z = (matrix[2][1] + matrix[1][2]) * s;
            const x = (matrix[1][0] + matrix[0][1]) * s;
            const w12 = (matrix[2][0] - matrix[0][2]) * s;
            return new Quaternion(w12, new Vector3(x, y, z));
        }
        let s = Math.sqrt(matrix[2][2] - matrix[0][0] - matrix[1][1] + 1);
        const z = 0.5 * s;
        s = 0.5 / s;
        const x = (matrix[0][2] + matrix[2][0]) * s;
        const y = (matrix[2][1] + matrix[1][2]) * s;
        const w13 = (matrix[0][1] - matrix[1][0]) * s;
        return new Quaternion(w13, new Vector3(x, y, z));
    }
    static lookAt(dir, up) {
        return Quaternion.fromMatrix3(Matrix3.lookToLh(dir, up));
    }
    static between(a, b) {
        const kCosTheta = a.dot(b);
        if (kCosTheta === 1) {
            return Quaternion.one();
        }
        const k = Math.sqrt(a.mag2() * b.mag2());
        if (kCosTheta / k === -1) {
            let orthogonal = a.cross(Vector3.right());
            if (orthogonal.mag2() === 0) {
                orthogonal = a.cross(Vector3.up());
            }
            return new Quaternion(0, orthogonal.normal());
        }
        return new Quaternion(k + kCosTheta, a.cross(b)).normal();
    }
    constructor(scalar, vector){
        this.scalar = scalar ?? 0;
        this.vector = vector ?? Vector3.zero();
    }
    clone() {
        return new Quaternion(this.scalar, this.vector);
    }
    mag() {
        return Math.hypot(this.scalar, this.vector.x, this.vector.y, this.vector.z);
    }
    mag2() {
        return this.scalar ** 2 + this.vector.x ** 2 + this.vector.y ** 2 + this.vector.z ** 2;
    }
    normal() {
        return this.div(this.mag());
    }
    dot(other) {
        return this.scalar * other.scalar + this.vector.dot(other.vector);
    }
    conjugate() {
        return new Quaternion(this.scalar, this.vector.neg());
    }
    invert() {
        return this.conjugate().div(this.mag2());
    }
    rot(vector) {
        const tmp = this.vector.cross(vector).add(vector.mul(this.scalar));
        return this.vector.cross(tmp).mul(2).add(vector);
    }
    nlerp(other, alpha) {
        if (this.dot(other) < 0) {
            other = other.neg();
        }
        return this.mul(1 - alpha).add(other.mul(alpha)).normal();
    }
    slerp(other, alpha) {
        let dot = this.dot(other);
        if (dot < 0) {
            other = other.neg();
            dot = -dot;
        }
        if (dot > 0.9995) {
            return this.nlerp(other, alpha);
        }
        const robustDot = Math.max(Math.min(dot, 1), -1);
        const theta = new Rad(robustDot).acos();
        const scale1 = new Rad(theta * (1 - alpha)).sin();
        const scale2 = new Rad(theta * alpha).sin();
        return this.mul(scale1).add(other.mul(scale2)).normal();
    }
    set(scalar, vector) {
        this.scalar = scalar;
        this.vector = vector;
        return this;
    }
    add(other) {
        const { vector , scalar  } = typeof other === "number" ? {
            vector: new Vector3(other),
            scalar: other
        } : other;
        return new Quaternion(this.scalar + scalar, this.vector.add(vector));
    }
    sub(other) {
        const { vector , scalar  } = typeof other === "number" ? {
            vector: new Vector3(other),
            scalar: other
        } : other;
        return new Quaternion(this.scalar - scalar, this.vector.sub(vector));
    }
    mul(other) {
        if (typeof other === "number") {
            return new Quaternion(this.scalar * other, this.vector.mul(other));
        }
        return new Quaternion(this.scalar * other.scalar - this.vector.x * other.vector.x - this.vector.y * other.vector.y - this.vector.z * other.vector.z, new Vector3(this.scalar * other.vector.x + this.vector.x * other.scalar + this.vector.y * other.vector.z - this.vector.z * other.vector.y, this.scalar * other.vector.y + this.vector.y * other.scalar + this.vector.z * other.vector.x - this.vector.x * other.vector.z, this.scalar * other.vector.z + this.vector.z * other.scalar + this.vector.x * other.vector.y - this.vector.y * other.vector.x));
    }
    div(other) {
        return new Quaternion(this.scalar / other, this.vector.div(other));
    }
    neg() {
        return new Quaternion(-this.scalar, this.vector.neg());
    }
    eq(other) {
        return this.scalar === other.scalar && this.vector.eq(other.vector);
    }
    is_finite() {
        return isFinite(this.scalar) && this.vector.isFinite();
    }
    toString() {
        return `Quaternion { scalar: ${this.scalar}, vector: ${this.vector.toString()} }`;
    }
}
export { Quaternion as Quaternion };
